[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "event_frequency": "All",
  "modified": "2023-07-31 19:36:29.629878",
  "module": "Bank of Punjab",
  "name": "Remove Markups",
  "reference_doctype": "Salary Slip",
  "script": "if doc.loans:\n    for loan in doc.loans:\n        query = f\"\"\"SELECT name,calculated_markup_amount FROM `tabAccumulated Markup` WHERE parent = '{loan.loan}' and salary_slip = '{doc.name}'\"\"\"\n        result = frappe.db.sql(query,as_dict=1)[0]\n        if result:\n            markup_to_reduce = result.calculated_markup_amount\n            # del_query = f\"delete `tabAccumulated Markup` WHERE name = '{result.name}'\"\n            # del_res = frappe.db.sql(del_query)\n            accumulated_markup_doc = frappe.get_doc(\"Accumulated Markup\", result.name)\n            accumulated_markup_doc.cancel()\n            accumulated_markup_doc.delete(ignore_permissions=True)\n            loan_doc = frappe.get_doc(\"Loan\",loan.loan)\n            loan_doc.accumulated_markup = loan_doc.accumulated_markup - markup_to_reduce\n            loan_doc.save(ignore_permissions=True)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2023-07-26 12:10:57.560530",
  "module": "Bank of Punjab",
  "name": "Markup Calculations",
  "reference_doctype": "Salary Slip",
  "script": "# Checking if salary slip is deducting any loans\nif doc.loans:\n    # Calculating total days against which the markup will be calculated\n    total_no_of_days = frappe.utils.date_diff(doc.end_date,doc.start_date)\n    for row in doc.loans:\n        # for each loan being deducted in salary slip\n        if row.loan and doc.employee:\n            #  Check if it is the first installment of loan repayment\n            query = f\"select name from `tabAccumulated Markup` where parent = '{row.loan}'\"\n            loan_installments_paid = frappe.db.sql(query)\n            if not loan_installments_paid:\n                # fetch disbursement date and calculate total days based on that date\n                disbursement_date = frappe.db.get_value(\"Loan\",row.loan,[\"disbursement_date\"])\n                total_no_of_days = frappe.utils.date_diff(doc.end_date,disbursement_date)\n            else:\n                # Check if loan was deducted last month or not\n                query = f\"select name, end_date from `tabSalary Slip` where employee = '{doc.employee}' order by creation, posting_date limit 1\"\n                last_salary = frappe.db.sql(query,as_dict=1)[0]\n                salary_doc = frappe.get_doc(\"Salary Slip\",last_salary.name)\n                if salary_doc.loans:\n                    if frappe.utils.date_diff(last_salary.end_date,doc.start_date) > 3:\n                        pass\n                    else:\n                        total_no_of_days = frappe.utils.date_diff(doc.end_date,last_salary.end_date)\n                else:\n                    total_no_of_days = frappe.utils.date_diff(doc.end_date,last_salary.end_date)\n\n            # calculate total paid amount i.e., total loan paid till now\n            paid_principal_amount = frappe.db.sql(f\"\"\"\n                            SELECT ifnull(sum(amount_paid),0) as total_paid FROM `tabLoan Repayment` \n                            WHERE against_loan = '{row.loan}' and applicant = '{doc.employee}'\n                                  and docstatus = 1  \"\"\",as_dict=1)\n            if paid_principal_amount:\n                paid_amount = paid_principal_amount[0].total_paid\n            else:\n                paid_amount = 0\n            total_paid_amount = row.total_payment + paid_amount\n            total_principal = frappe.db.get_value(\"Loan\",row.loan,\"total_payment\")\n            markup_rate = frappe.db.get_value(\"Loan\",row.loan,\"mark_up_rate\")\n            frappe.db.set_value(\"Loan\",row.loan,\"remaining_principal_amount\",total_principal - total_paid_amount)\n            \n            markup_details = frappe.new_doc(\"Accumulated Markup\")\n            markup_details.update({\n                \"parenttype\": \"Loan\",\n                \"parentfield\": \"accumulated_markup_details\",\n                \"parent\": row.loan,\n                \"against_no_of_days\": total_no_of_days,\n                \"markup_rate\": markup_rate,\n                \"remaining_principal_amount\": total_principal - total_paid_amount,\n                \"calculated_markup_amount\": (((total_principal - total_paid_amount) * markup_rate) * total_no_of_days)/ 36500,\n                \"salary_slip\": doc.name,\n                \"transaction_date\": doc.posting_date\n            })\n            markup_details.insert(ignore_permissions=True)\n            lates_markup = (((total_principal - total_paid_amount) * markup_rate) * total_no_of_days)/ 36500\n            previous_markup = frappe.db.get_value(\"Loan\",row.loan,\"accumulated_markup\")\n            frappe.db.set_value(\"Loan\",row.loan,\"accumulated_markup\",previous_markup + lates_markup )",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2023-07-26 11:57:13.217742",
  "module": "Bank of Punjab",
  "name": "Rescheduling Loan Repayments",
  "reference_doctype": "Re Schedule Loan Repayment",
  "script": "if doc.date_of_repayment:\n    first_day = frappe.utils.get_first_day(doc.date_of_repayment)\n    last_day = frappe.utils.add_months(first_day, 1)\n    loans = frappe.db.sql(\n            f\"\"\"select name\n            from `tabLoan` \n            where name in \n                    (select parent \n                    from `tabRepayment Schedule` \n                    where payment_date between '{first_day}' and '{last_day}'\n                    and is_accrued = 0) \n                and docstatus = 1\n                and repay_from_salary = 1\n                \"\"\",as_dict=1)\n    if loans:\n        doc.re_schedule_loan_repayment_table = []\n        for loan in loans:\n            emp = frappe.db.get_value(\"Loan\",loan.name,\"applicant\")\n            emp_name = frappe.db.get_value(\"Loan\",loan.name,\"applicant_name\")\n            doc.append('re_schedule_loan_repayment_table', {\n            'loan': loan.name,\n            'employee':emp,\n            'employee_name':emp_name\n            })",
  "script_type": "DocType Event"
 }
]